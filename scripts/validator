#!/usr/bin/env python

import os
import uuid
import argparse

import ROOT
ROOT.PyConfig.IgnoreCommandLineOptions = True
ROOT.gROOT.SetBatch(True)

from triggers import L1_ITEMS, HLT_ITEMS, list_to_vector

if __name__ == '__main__':
    from samples import SAMPLES
    
    parser = argparse.ArgumentParser()
    parser.add_argument('step', type=str.lower, choices=['l1', 'hlt', 'L1', 'HLT'], help='Choose l1 or hlt (case insensitive)')
    parser.add_argument('--sample', type=str, choices=SAMPLES.keys(), help='choose the sample to run over', default=None)
    parser.add_argument(
        '--path', type=str, default=None)
        #default='/afs/cern.ch/user/q/qbuat/work/public/mc15_13TeV/test/', 
        #help='default = %(default)s')
    parser.add_argument('--run-dir', type=str, default=None, help='default = %(default)s')
    parser.add_argument('--l1-trig', type=str, default=None, help='default = %(default)s')
    parser.add_argument('--hlt-trig', type=str, action='append', default=None, help='default = %(default)s')
    parser.add_argument('--hlt-ref-trig', type=str, default='HLT_tau25_idperf_tracktwo', help='default = %(default)s')
    parser.add_argument('--verbose', default=False, action='store_true', help='default = %(default)s')
    parser.add_argument('--num-events', default=-1, type=int, help='default = %(default)s')
    args = parser.parse_args()

    ROOT.gROOT.Macro('$ROOTCOREDIR/scripts/load_packages.C')

    # if not ROOT.xAOD.Init().isSuccess():
    #     raise RuntimeError

    # Sanity check on path
    if args.path is not None:
        if not os.path.exists(args.path):
            print "Path {0} doesn't exist - ignoring".format(args.path)
            args.path = None

    if args.sample is not None and args.path is not None:
        print "Cannot use both --sample and --path"
        sys.exit()

    if args.sample is not None:
        print 'Attempting to grab eos samples'
        # Get SampleHandler from EOS
        from eos import get_sample
        sample = get_sample(SAMPLES[args.sample])
        sample.printContent()
        sample.setMetaString ("nc_tree", "CollectionTree")
    
    if args.path is not None:
        sample = ROOT.SH.SampleHandler()
        path = ROOT.gSystem.ExpandPathName(args.path)
        ROOT.SH.ScanDir().sampleDepth(0).scan(sample, path)
        sample.setMetaString ("nc_tree", "CollectionTree")
        sample.printContent()
    
    if args.l1_trig != None:
        L1_TRIGGERS = [args.l1_trig]
    else:
        L1_TRIGGERS = L1_ITEMS

    if args.hlt_trig != None:
        HLT_TRIGGERS = args.hlt_trig
    else:
        HLT_TRIGGERS = HLT_ITEMS

    if args.step == 'l1':
        alg = ROOT.L1EmulationLoop()
        alg.l1_chains = list_to_vector(L1_TRIGGERS)
    else:
        alg = ROOT.HLTEmulationLoop()
        alg.l1_chains = list_to_vector(L1_TRIGGERS)
        alg.reference_chain = args.hlt_ref_trig
        alg.chains_to_test = list_to_vector(HLT_TRIGGERS)

    alg.SetName('EmulationLoop')
    if args.verbose:
        # See atlas/Control/AthToolSupport/AsgTools/AsgTools/MsgLevel.h
        alg.setMsgLevel(1) # VERBOSE
    else:
        alg.setMsgLevel(3) # INFO

    # Setup the EventLoop Job
    job = ROOT.EL.Job()
    job.sampleHandler(sample)
    #job.sampleHandler(sh)
    job.algsAdd(alg)

    if args.num_events > 0:
      job.options().setDouble(ROOT.EL.Job.optMaxEvents, args.num_events)

    # define the run dir
    if args.run_dir == None:
        run_dir = 'run_' + uuid.uuid4().hex
    else:
        run_dir = args.run_dir
        
    # run, run, run!
    driver = ROOT.EL.DirectDriver()
    driver.submit(job, run_dir)

